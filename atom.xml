<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wiki</title>
  
  <subtitle>my hearts will go on!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mayi21.github.io/"/>
  <updated>2019-02-17T10:24:22.526Z</updated>
  <id>https://mayi21.github.io/</id>
  
  <author>
    <name>Mayi21</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Tensorflow构建自定义的图片分类器</title>
    <link href="https://mayi21.github.io/2019/02/17/Tensorflow%E6%9E%84%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%9B%BE%E7%89%87%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://mayi21.github.io/2019/02/17/Tensorflow构建自定义的图片分类器/</id>
    <published>2019-02-17T10:24:22.525Z</published>
    <updated>2019-02-17T10:24:22.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作环境：Ubuntu-18-04-Tensorflow-1-7"><a href="#操作环境：Ubuntu-18-04-Tensorflow-1-7" class="headerlink" title="操作环境：Ubuntu 18.04 Tensorflow 1.7"></a>操作环境：Ubuntu 18.04 Tensorflow 1.7</h3><p>1.安装配置Tensorflow或者利用Docker.Tensorflow的安装这里不予多介绍，主要介绍一下Docker的用法。<br>Docker的操作命令如下:<br><code>docker pull tensorflow/tensorflow</code><br><code>#指定宿主机的目录和容器的目录，实现文件共享</code><br><code>docker run -it -v /root:/root tensorflow/tensorflow</code><br>2.克隆Git<br><code>git clone https://github.com/googlecodelabs/tensorflow-for-poets-2</code><br><code>cd tensorflow-for-poets-2</code><br>3.准备训练数据，将这些数据存放在tf_files文件夹下，这些数据要求：这个tf_files/&lt;自定义文件夹&gt;下面是子文件夹，子文件夹下面是同种类型的图片(如果是人，那该文件下就是这个人的所有图片，子文件夹的名字就是这些图片的名字)<br>4.准备训练数据。定义图片的大小，<br><code>export IMAGE_SIZE=224</code><br><code>export ARCHITECTURE=&quot;mobilenet_0.50_${IMAGE_SIZE}&quot;</code><br>开始训练。<br><code>python -m scripts.retrain --bottleneck_dir=tf_files/bottlenecks --how_many_training_steps=500 --model_dir=tf_files/models/ --summaries_dir=tf_files/training_summaries/&quot;${ARCHITECTURE}&quot; --output_graph=tf_files/retrained_graph.pb --output_labels=tf_files/retrained_labels.txt --architecture=&quot;${ARCHITECTURE}&quot; --image_dir=tf_files/&lt;自定义的文件夹&gt;</code><br>–how_many_training_steps=500 这个是训练多少步。这里可以不用这个命令，使用默认步数4000步<br>5.验证数据。<br><code>python -m scripts.label_image --graph=tf_files/retrained_graph.pb --image=&lt;自己想检测的图片&gt;</code><br>然后下面就会出现验证的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;操作环境：Ubuntu-18-04-Tensorflow-1-7&quot;&gt;&lt;a href=&quot;#操作环境：Ubuntu-18-04-Tensorflow-1-7&quot; class=&quot;headerlink&quot; title=&quot;操作环境：Ubuntu 18.04 Tensorflow
      
    
    </summary>
    
      <category term="python" scheme="https://mayi21.github.io/categories/python/"/>
    
    
      <category term="Tensorflow" scheme="https://mayi21.github.io/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>idea开发hadoop</title>
    <link href="https://mayi21.github.io/2018/12/03/idea%E5%BC%80%E5%8F%91hadoop/"/>
    <id>https://mayi21.github.io/2018/12/03/idea开发hadoop/</id>
    <published>2018-12-03T08:54:53.797Z</published>
    <updated>2019-02-17T10:04:34.280Z</updated>
    
    <content type="html"><![CDATA[<p>下载idea和hadopp源码包<br>新建一个java project，用于hadoop开发，同时需要导入hadoop的相关依赖包<br>java project建成后，点击project structure，进入Dependencies，点击右边的+，点击JARs or<br><a id="more"></a><br>directories…,添加依赖，这些依赖都可以在share/hadoop下面找到<br><code>common</code><br><code>hdfs</code><br><code>mapreduce</code><br><code>yarn</code><br><code>common/lib</code><br>然后是Artifacts,点击+,添加JAR&gt;Empty,名称自定义，然后点击+，点击Module output,在弹出的对话框选择当前的项目，点击保存。<br>接着新建一个Application，Edit Configurations，点击+，新建一个Application，在Main Class中填入<br><code>org.apache.hadoop.util.RunJar</code><br>Working directory当然是选择当前项目的目录了， Program arguments  这个是设置默认参数的会在程序执行的时候传递进去<br><code>/home/edmond/workspace/IdeaProjects/Hadoop/HadoopWordCount/out/artifacts/wordcount/wordcount.jar</code><br><code>com.company.Main</code><br><code>input</code><br><code>output</code><br>第一个是jar包所在的位置<br>第二个是Main函数所在的类<br>第三四两个参数是由自己决定的（这两个参数会作为args[0]和args[1]传入）<br>点击ok保存。<br>自己写mapper和reducer测试吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载idea和hadopp源码包&lt;br&gt;新建一个java project，用于hadoop开发，同时需要导入hadoop的相关依赖包&lt;br&gt;java project建成后，点击project structure，进入Dependencies，点击右边的+，点击JARs or&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://mayi21.github.io/categories/Java/"/>
    
    
      <category term="hadoop" scheme="https://mayi21.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>配置远程访问jupyter</title>
    <link href="https://mayi21.github.io/2018/07/21/%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEjupyter/"/>
    <id>https://mayi21.github.io/2018/07/21/配置远程访问jupyter/</id>
    <published>2018-07-21T09:58:08.241Z</published>
    <updated>2018-12-03T09:50:23.897Z</updated>
    
    <content type="html"><![CDATA[<p>##前言：jupyternotebook是一款在线的python编程环境。交互式的编程环境，支持四十多种语言。对于爬虫和分析数据，这样的操作十分方便。众所周知：Jupyter是一个WEB应用。本篇文章教大家在服务器端部署Jupyter并远程访问。<br>1.服务器环境：大家可以自行在网上购买服务器，本篇文章使用的服务器环境是Ubuntu 16.04.1 LTS x86_64。<br>2.安全规则：添加安全规则，开放8888端口，记得同时开放22端口，以便在putty，xshell等软件上登陆;然后关联服务器实例。<br><a id="more"></a><br>3.使用wget下载anaconda，在<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>寻找相应的版本，复制下载链接，然后wget便可。<br>4.使用sh Anaconda3-5.1.0-Linux-x86_64.sh安装Anaconda，安装一路yes便可，安装完成后重启终端，尝试<code>conda</code>.<br>5.输入<code>jupyter notebook --generate-config</code>,生成默认的jupyter配置文件<br>6.安装ipython,<code>sudo apt-get install ipython3</code>.<br>7.启动ipython<code>ipthon</code>，输入<code>from notebook.auth import passwd</code>回车，输入<code>passwd()</code>，此时要求输入密码，这个密码为登陆服务器端jupyter的密码.两次输入后得到密钥(以sha开头的).<br>8.<code>vim /home/ubuntu/.jupyter/jupyter_notebook_config.py</code><br>9.在<code># Configuration file for jupyter-notebook.</code>后另起一行添加<br><code>c.NotebookApp.ip=&#39;*&#39;</code><br><code>c.NotebookApp.password = u&#39;密钥&#39;</code><br><code>c.NotebookApp.open_browser = False</code><br><code>c.NotebookApp.port =8888</code><br>保存退出.<br>10.运行Jupyter Notebook <code>jupyter notebook</code><br>11.在本地电脑浏览器上输入[<a href="http://you" target="_blank" rel="noopener">http://you</a> server ip:8888]<br>12.输入上面设置的密码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##前言：jupyternotebook是一款在线的python编程环境。交互式的编程环境，支持四十多种语言。对于爬虫和分析数据，这样的操作十分方便。众所周知：Jupyter是一个WEB应用。本篇文章教大家在服务器端部署Jupyter并远程访问。&lt;br&gt;1.服务器环境：大家可以自行在网上购买服务器，本篇文章使用的服务器环境是Ubuntu 16.04.1 LTS x86_64。&lt;br&gt;2.安全规则：添加安全规则，开放8888端口，记得同时开放22端口，以便在putty，xshell等软件上登陆;然后关联服务器实例。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://mayi21.github.io/categories/python/"/>
    
    
      <category term="python开发" scheme="https://mayi21.github.io/tags/python%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站第一步(1)</title>
    <link href="https://mayi21.github.io/2018/06/26/hexo%E5%BB%BA%E7%AB%99%E7%AC%AC%E4%B8%80%E6%AD%A5-1/"/>
    <id>https://mayi21.github.io/2018/06/26/hexo建站第一步-1/</id>
    <published>2018-06-26T14:16:33.965Z</published>
    <updated>2018-12-03T09:50:51.145Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载git和node.js<br>2.打开GitBash<br>3.下载并安装hexo<br><a id="more"></a><br>4.新建一个文件夹，hexo inital先初始化一下该目录<br>5.自己找合适的主题</p><hr><p>今天主要谈一下绑定域名<br>1.申请域名，闲着没事干，免费申请了一年的域名，<a href="http://www.freenom.com" target="_blank" rel="noopener">freenom</a><br>2.介绍一下主要怎么操作，先“寻找一个新的免费域名”，点击“检查可用性”，会出来一些免费的域名。<br>3.自己选其所好，找到一个加入购物车<br>4.去购物车结帐，都是不要钱的。点击“继续”，<br>5.这时候应该要求填写个人信息，这里提供<a href="https://www.fakenamegenerator.com/" target="_blank" rel="noopener">随机生成身份</a>。选择想要的信息。<br>6.邮箱要填自己的，然后邮箱收件箱会收到一封邮件，要求你注册一下。<br>7.你注册好后，在上面网站继续登录。你就会发现你有这个域名了（如果没有，你再搜一下，重新添加进你的购物车）<br>8.有域名后，在你的博客source目录下，添加名字为<code>CNAME</code>（注意没有后缀）的文件，里面的内容就是你的域名。然后<code>hexo g</code>和<code>hexo d</code>下。继而进入DNSPOD把自己的域名解析一下。<br>9.主要先登录，qq，微信都可以。登录上，进入管理控制台，添加自己的域名到域名解析。添加记录的每一项，系统都会提示代表意思，这里主要解释记录类型<br>A记录：地址记录，用来指定域名的IP地址<br>CNAME记录：如果需要将域名指向另一个域名，再由另一个域名提供IP地址，就需要添加CNAME记录<br>NS记录：域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录<br>上面的NS记录是系统默认添加的。<br>A记录就是指向对应IP地址，这里的<code>192.30.252.153</code>和<code>192.30.252.154</code>是github的服务器IP地址。<br>CNAME记录这里可填可不填，因为A记录已经将<code>mayi21.tk</code>和<code>mayi21.github.io</code>的域名统一为一个IP地址了<br>有一种情况就是为了提高访问速度，要区分国内国外不同用户使用不同的网站进行重定向需要添加对应的CNAME记录。<br>10.然后继续输入你的<code>name.github.io</code>，就会跳转到你绑定的域名中。</p><hr><p>google收录<br>1.打开<a href="https://www.google.com/webmasters" target="_blank" rel="noopener">谷歌搜索引擎验证</a><br>2.输入自己的博客地址，添加属性，我用的是域名服务商验证，把google提供的文本，按照提示添加进入DNSPOD就行了<br>3.点击验证,应该就可以成功了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.下载git和node.js&lt;br&gt;2.打开GitBash&lt;br&gt;3.下载并安装hexo&lt;br&gt;
    
    </summary>
    
      <category term="建站" scheme="https://mayi21.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo建站" scheme="https://mayi21.github.io/tags/hexo%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
